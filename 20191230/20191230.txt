1 存储

    分页式/分段式
     分页：页号+页内偏移地址  通过页号找到块号，算出块的起始地址 最后块的起始地址加上页偏移（离散率高，对内存的使用效率高）
   分段：段号+段内偏移  通过段号，找到段的起始地址，然后段的起始地址加上段内偏移地址 （对程序存储比较友好）
   段页式：段号+页号+页内偏移地址  首先通过段号找到页的起始地址，（找到页表） 通过页表中的页号找到相应的块号，通过块号计算出块的
起始地址，块的起始地址加上页内偏移。

  环境变量：三种方式获取
        第一方式，main的函数的参数 int main（int argc，char* argv【】，char*env【】）
	使用libc库中的environ（char**）
                getenv（const char*）
  环境变量的组织格式：
   采用指针数组保存环境变量，最后一个元素为NULL；

进程虚拟地址空间：
  程序地址空间，进程地址空间。
写时拷贝。：当父进程定义了一个全局变量，FORK一个子进程，当子进程对该全局变量进行修改的时候，则子进程会更改自己的页表映射关系
，也就是说操作系统会重新开辟一段空间来保存修改的值；


进程的优先性：
	进程优先级是为了保证操作系统调度过程的时候，比较合理
	优先级可以使用命令查看
    		top命令查看
  		PR进程优先级的数值
		NI：进程优先级的修正值  可以通过修改NI值来修改PR的值

		PR(new)=PR(old)+NI

3.修改NI值
top-》r-》输入进程的PID==》输入修改后的NI值
4.nice的取值范围是-20到19，一共四十个级别
5.进程优先级的数值越小，代表优先级越高。
6.虽然用户可以改变NI值，从而更改PR值，但是操作系统调度的解释权归操作系统所有。
 

	
